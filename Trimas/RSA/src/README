Assignment No.3 was to develop the RSA crypto system from scratch, using only C librarys (no OpenSSL this time).

The tool supports the following commands:

	1)	Key generation.
	2)	Encryption.
	3)	Decryption.

To support those commands, in the rsa.h and rsa.c files, one can find the functions that implement the tool.

For the key generation (public and private), the following functions were implemented:

1) sieve_of_eratosthenis(): A clever mathematical tool to get all the prime numbers that are less or equal to the limit, one defines.

2) gcd(): A very simple function that returns the greatest common denominator.

3) choose_e(): This function, chooses an encryption key or public exponent if you like.

4) mod_inverse(): Calculates the modular inverse.

5) rsa_keygen(): This function creates the private and public key files.

In detail, I generate two "large" random primes, p and q, of approximately equal size such that their product n=pq is of the required bit length. Then, I compute n=pq and fi = (p-1)(q-1). Next step, is to choose an "integer" e, such that 1<e<fi and gcd(e,fi)=1. Lastly, I compute the "secret" exponent d, where 1<d<fi and ed is an identity to 1 mod fi. The public key is (n,d) and the private key (n,e) in this order.

Extra functions:
	1) compute_n(): where n = p*q.
	2) calc_fi_n(): it calculates the fi = (p-1)(q-1).
	3) gcdExtended(): a geeks4geeks function to make my life easier.

The encryption part works like this: After I obtain the desired keys, I represent the plaintext message as a positive "integer" m, with 1<m<n. Then, I compute the ciphertext c = m^e mod n, and write the file.

The decryption part, works quite similar. Uses the appropriate key and computes m = c^d mod n. Then it extracts the plaintext message.

In order to complete the encryption/decryption parts, the recursive function modExp() was created and does exactly the math the encryption/decryption need.




